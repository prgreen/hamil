// Generated by CoffeeScript 1.6.1
(function() {
  var Grid, Hamil, Player;

  Grid = require("./grid");

  Player = require("./player");

  module.exports = Hamil = (function() {

    function Hamil(M, N) {
      if (M == null) {
        M = 10;
      }
      if (N == null) {
        N = 10;
      }
      this.grid = new Grid(M, N);
      this.solution = this.grid.createLevel();
      this.players = {};
    }

    Hamil.prototype.addPlayer = function(name) {
      return this.players[name] = new Player(name, this.grid);
    };

    Hamil.prototype.addRobot = function() {
      return this.players['robot'] = new Player('robot', this.grid, true);
    };

    Hamil.prototype.removePlayer = function(name) {
      return delete this.players[name];
    };

    Hamil.prototype.newLevel = function() {
      var k, v, _ref, _results;
      this.solution = this.grid.createLevel();
      _ref = this.players;
      _results = [];
      for (k in _ref) {
        v = _ref[k];
        v.resetPath();
        _results.push(v.resetScore());
      }
      return _results;
    };

    Hamil.prototype.json = function() {
      var k, state, v, _ref;
      state = {};
      state.grid = this.grid.grid;
      state.grid_width = this.grid.M;
      state.grid_height = this.grid.N;
      state.players = {};
      _ref = this.players;
      for (k in _ref) {
        v = _ref[k];
        state.players[k] = v.path;
      }
      return state;
    };

    Hamil.prototype.stats = function() {
      var k, score, scores, v, _ref;
      scores = [];
      _ref = this.players;
      for (k in _ref) {
        v = _ref[k];
        if (!v.isRobot) {
          score = {};
          score[v.name] = v.score;
          scores.push(score);
        }
      }
      scores.sort(function(a, b) {
        return a.score - b.score;
      });
      return scores;
    };

    return Hamil;

  })();

}).call(this);
